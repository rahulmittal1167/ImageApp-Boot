{"version":3,"sources":["http-common.js","services/upload-files.service.js","components/upload-images.component.js","App.js","reportWebVitals.js","index.js"],"names":["axios","create","headers","file","onUploadProgress","formData","FormData","append","http","post","get","BorderLinearProgress","withStyles","theme","root","height","borderRadius","colorPrimary","backgroundColor","bar","LinearProgress","UploadImages","props","selectFile","bind","upload","state","currentFile","undefined","previewImage","progress","message","isError","imageInfos","UploadService","getFiles","then","response","setState","data","event","this","target","files","URL","createObjectURL","Math","round","loaded","total","catch","err","className","htmlFor","id","name","style","display","type","accept","onChange","Button","variant","component","color","disabled","onClick","Box","alignItems","width","mr","value","minWidth","Typography","src","alt","map","image","index","ListItem","divider","url","href","Component","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a5805225.chunk.js","sourcesContent":["import axios from \"axios\";\n\nexport default axios.create({\n // baseURL: \"http://localhost:8080\",\n  headers: {\n    \"Content-type\": \"application/json\"\n  }\n});","import http from \"../http-common\";\n\nclass UploadFilesService {\n  upload(file, onUploadProgress) {\n    let formData = new FormData();\n\n    formData.append(\"file\", file);\n\n    return http.post(\"/upload\", formData, {\n      headers: {\n        \"Content-Type\": \"multipart/form-data\",\n      },\n      onUploadProgress,\n    });\n  }\n\n  getFiles() {\n    return http.get(\"/files\");\n  }\n}\n\nexport default new UploadFilesService();\n","import React, { Component } from \"react\";\nimport LinearProgress from '@material-ui/core/LinearProgress';\nimport { Box, Typography, Button, ListItem, withStyles } from '@material-ui/core';\n\nimport UploadService from \"../services/upload-files.service\";\n\nconst BorderLinearProgress = withStyles((theme) => ({\n  root: {\n    height: 15,\n    borderRadius: 5,\n  },\n  colorPrimary: {\n    backgroundColor: \"#EEEEEE\",\n  },\n  bar: {\n    borderRadius: 5,\n    backgroundColor: '#1a90ff',\n  },\n}))(LinearProgress);\n\nexport default class UploadImages extends Component {\n  constructor(props) {\n    super(props);\n    this.selectFile = this.selectFile.bind(this);\n    this.upload = this.upload.bind(this);\n\n    this.state = {\n      currentFile: undefined,\n      previewImage: undefined,\n      progress: 0,\n\n      message: \"\",\n      isError: false,\n      imageInfos: [],\n    };\n  }\n\n  componentDidMount() {\n    UploadService.getFiles().then((response) => {\n      this.setState({\n        imageInfos: response.data,\n      });\n    });\n  }\n\n  selectFile(event) {\n    this.setState({\n      currentFile: event.target.files[0],\n      previewImage: URL.createObjectURL(event.target.files[0]),\n      progress: 0,\n      message: \"\"\n    });\n  }\n\n  upload() {\n    this.setState({\n      progress: 0\n    });\n\n    UploadService.upload(this.state.currentFile, (event) => {\n      this.setState({\n        progress: Math.round((100 * event.loaded) / event.total),\n      });\n    })\n      .then((response) => {\n        this.setState({\n          message: response.data.message,\n          isError: false\n        });\n        return UploadService.getFiles();\n      })\n      .then((files) => {\n        this.setState({\n          imageInfos: files.data,\n        });\n      })\n      .catch((err) => {\n        this.setState({\n          progress: 0,\n          message: \"Could not upload the image!\",\n          currentFile: undefined,\n          isError: true\n        });\n      });\n  }\n\n  render() {\n    const {\n      currentFile,\n      previewImage,\n      progress,\n      message,\n      imageInfos,\n      isError\n    } = this.state;\n    \n    return (\n      <div className=\"mg20\">\n        <label htmlFor=\"btn-upload\">\n          <input\n            id=\"btn-upload\"\n            name=\"btn-upload\"\n            style={{ display: 'none' }}\n            type=\"file\"\n            accept=\"image/*\"\n            onChange={this.selectFile} />\n          <Button\n            className=\"btn-choose\"\n            variant=\"outlined\"\n            component=\"span\" >\n             Choose Image\n          </Button>\n        </label>\n        <div className=\"file-name\">\n        {currentFile ? currentFile.name : null}\n        </div>\n        <Button\n          className=\"btn-upload\"\n          color=\"primary\"\n          variant=\"contained\"\n          component=\"span\"\n          disabled={!currentFile}\n          onClick={this.upload}>\n          Upload\n        </Button>\n\n        {currentFile && (\n          <Box className=\"my20\" display=\"flex\" alignItems=\"center\">\n            <Box width=\"100%\" mr={1}>\n              <BorderLinearProgress variant=\"determinate\" value={progress} />\n            </Box>\n            <Box minWidth={35}>\n              <Typography variant=\"body2\" color=\"textSecondary\">{`${progress}%`}</Typography>\n            </Box>\n          </Box>)\n        }\n\n        {previewImage && (\n          <div>\n            <img className=\"preview my20\" src={previewImage} alt=\"\" />\n          </div>\n        )}\n\n        {message && (\n          <Typography variant=\"subtitle2\" className={`upload-message ${isError ? \"error\" : \"\"}`}>\n            {message}\n          </Typography>\n        )}\n\n        <Typography variant=\"h6\" className=\"list-header\">\n          List of Images\n          </Typography>\n        <ul className=\"list-group\">\n          {imageInfos &&\n            imageInfos.map((image, index) => (\n              <ListItem\n                divider\n                key={index}>\n                <img src={image.url} alt={image.name} height=\"80px\" className=\"mr20\" />\n                <a href={image.url}>{image.name}</a>\n              </ListItem>\n            ))}\n        </ul>\n      </div >\n    );\n  }\n}\n","import React from \"react\";\nimport \"./App.css\";\nimport { Typography } from \"@material-ui/core\";\n\nimport UploadImages from \"./components/upload-images.component\";\n\nfunction App() {\n  return (\n    <div className=\"container\">\n      <div className=\"mg20\">\n        <Typography variant=\"h5\">Tech Mahindra Image App</Typography>\n        <Typography variant=\"h6\">You can upload image and see the list below</Typography>\n      </div>\n\n      <UploadImages />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}